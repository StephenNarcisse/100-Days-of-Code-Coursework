.data	
	prompt:		.asciiz "\nEnter a string: "
	zarba:		.space 21
	fail:		.asciiz "\nThe sequence is not a palindrome. "
	success:	.asciiz "\n The sequence was a palindrome."
.text
main:
	li $t2, 0 #String size counter/index
	li $t3, 0 #String Size variable
	li $t4, 2 #Odd or even check
	li $s5, 0 #String Holder variable
	li $s6, 0 #Top of stack variable
	
	
	jal userInput
	
	la $s5, zarba #s5 points to the string
	
	stringSizeCheck:
		lb $a0, 0($s5) #Load the character from the string in a1 into a0
		beqz $a0, twentyCheck
		addu $s5, $s5, 1 #Go to the next byte in the string
		addi $t2, $t2, 1 #Increment index/counter
		j stringSizeCheck
	twentyCheck:
	#If the user entered 20 characters, skip subtracting a byte
	#If the user entered >20 characters, one character must be subtracted
	#Pressing enter adds \n to the string, so it must be removed before moving on
		addi $t3, $t2, 0 #Store string size in t3
		beq $t2, 20, sizeBreak
		sub $t3, $t2, 1 #Store string size in t3 - 1
	sizeBreak:
		div $t3, $t4 #Divide array size by 2
		mflo $s1 #Quotient
		mfhi $s2 #Remainder
		
		addi $t2, $zero, 0 #Reset counter
		la $s5, zarba #Reload the string
	pushLoop:
		lb $a0, 0($s5) #Place character from string into a0
		addi $sp, $sp, -4
		sw $a0, 0($sp) #Push character to the stack
		addu $s5, $s5, 1 #Go to the next byte in the string
		addi $t2, $t2, 1 #Counter +1
		beq $t2, $s1, evenOrOdd #When counter is equal to half of array size, leave loop
		j pushLoop
	evenOrOdd:
		beqz $s2, popLoop #If s2==0 array size even, go to Stack pop loop
		addi $s5, $s5, 1 #Skip the middle character if array size was odd
	popLoop:
		lw $a0, 0($sp) #Put top of stack in $a0
		move $s6, $a0 #store top of stack in s6
		lb $a0, 0($s5) #Load character from string
		bne $s6, $a0, checkFail #Compare if top of stack is the same as string character
		subi $sp, $sp, -4 #pop.Stack
		addi $s5, $s5, 1 #Next character in string
		addi $s1, $s1, -1 #s1 was half the string size. Now it's a counter matching how many times we must compare the stack
		beqz $s1, checkSuccess #When string reaches limiter, leave loop
		j popLoop
		
	checkFail:
		li $v0, 4
		la $a0, fail
		syscall
		j terminate
		
	checkSuccess:
		li $v0, 4
		la $a0, success
		syscall
terminate:
		li $v0, 10
		syscall
userInput:
	#Take user input, store it in input
	li $v0, 4
	la $a0, prompt
	syscall
	li $v0, 8
	la $a0, zarba
	li $a1, 21
	syscall
	jr $ra		
		
